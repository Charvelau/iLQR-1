For now, I am skipping the vectorization/parallelization of the forward pass so that
we can get this up and running quickly.
Eigen doesn't support 3D matrices...

Figure out where to put past inputs.


Stuff to do (in approximate order)

- step 2~4 in iLQR_core
	- check for termination due to small gradient

Check inputs/outputs individually:
- compute_derivatives
- forward_pass
- backward_pass

- correct tire dynamic model according to cyrus' commit on matlab repo
- iLQR::init_traj (check pending)
- iLQR::forward_pass - almost done, need control_limits to be implemented
- iLQR::backward_pass -
- step 2 in iLQR_core
- step 3 in iLQR_core

- integrate cost for change in control input
- printing stuff in iLQR_main at every iteration
- write final control sequence and states to text file
- test whole thing and see if output looks reasonable - plot in matlab

Later on:
- fix all the messy stuff
	- sort out public/private in classes
	- figure out how to have less arguments for methods - pass structs
	- extract methods into smaller methods, especially in fw, bw, boxQP



- make it faster
	- make everything matrices instead of vectors of matrices
	- see what the ddp-generator guy did to optimize
		- only calculate upper triangle in symmetric matrices
	- see links in notes
	- consts everywhere
	- vectorize for parallel line search


- make ir more readable
	- see google cpp style guide
	- refactor to completely separate iLQR class from Model class
		- make sure everything in iLQR is dimension-agnostic
	- make it reusable
		- make skeleton for new Model class, for reference

- add documentation
- eigen helper functions are all inline right now to prevent duplicate symbol error
